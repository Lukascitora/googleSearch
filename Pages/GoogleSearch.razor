@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Xml.Serialization
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JS
@inject IConfiguration Configuration


<h1 style="text-align:center">Vyhledávač Výsledků Google</h1>
<div class="container mt-4">
    <div class="input-group mb-3">
        <input value="@searchQuery" @oninput="e => searchQuery = e.Value.ToString()" class="form-control" placeholder="Zadejte hledaný výraz" @onkeydown="HandleKeyPress" />
        <button class="btn btn-primary" @onclick="FetchResults">Vyhledat</button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                
            </div>
        </div>
    }

    @if (results != null && results.Count > 0)
    {
        <div class="mb-3 d-flex align-items-center">
            <label for="formatSelect" class="form-label me-2 mb-0">Vyberte formát uložení:</label>
            <select id="formatSelect" class="form-select w-auto me-2" @bind="selectedFormat">
                <option value="json">JSON</option>
                <option value="xml">XML</option>
            </select>
            <button class="btn btn-success" @onclick="SaveResults">Uložit výsledky</button>
        </div>
        <ul class="list-group">
            @foreach (var item in results)
            {
                <li class="list-group-item">
                    <h5><a href="@item.Link" target="_blank">@item.Title</a></h5>
                    <p>@item.Snippet</p>
                </li>
            }
        </ul>
    }
    else if (hasSearched && (results == null || results.Count == 0))
    {
        <div class="alert alert-warning" role="alert">
            Nebyly nalezeny žádné výsledky pro dotaz "@searchQuery".
        </div>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private List<ResultItem> results = new();
    private bool isLoading = false;
    private bool hasSearched = false;
    private string selectedFormat = "json";

    private async Task FetchResults()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        isLoading = true;
        var apiKey = Configuration["GoogleAPIKey"];
        var cx = Configuration["GoogleCX"];
        var url = $"https://www.googleapis.com/customsearch/v1?key={apiKey}&cx={cx}&q={Uri.EscapeDataString(searchQuery)}";

        try
        {
            var response = await Http.GetFromJsonAsync<GoogleSearchResponse>(url);
            results = response.Items ?? new List<ResultItem>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při získávání výsledků: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FetchResults();
        }
    }

    private async Task SaveResults()
    {
        IDataSerializer serializer = DataSerializerFactory.CreateSerializer(selectedFormat);
        var data = serializer.Serialize(results);
        var fileName = $"results.{selectedFormat}";

        var byteArray = System.Text.Encoding.UTF8.GetBytes(data);
        using var streamRef = new DotNetStreamReference(new System.IO.MemoryStream(byteArray));
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public interface IDataSerializer
    {
        string Serialize(List<ResultItem> results);
    }

    // JSON serializer implementation
    public class JsonDataSerializer : IDataSerializer
    {
        public string Serialize(List<ResultItem> results)
        {
            return JsonSerializer.Serialize(results, new JsonSerializerOptions
                {
                    WriteIndented = true // Pretty-print JSON
                });
        }
    }

    // XML serializer implementation
    public class XmlDataSerializer : IDataSerializer
    {
        public string Serialize(List<ResultItem> results)
        {
            var xmlSerializer = new XmlSerializer(typeof(List<ResultItem>));
            using var stringWriter = new System.IO.StringWriter();

            // Serialize the results into XML
            xmlSerializer.Serialize(stringWriter, results);
            return stringWriter.ToString();
        }
    }

    // Factory to create the appropriate serializer based on the selected format
    public static class DataSerializerFactory
    {
        public static IDataSerializer CreateSerializer(string format)
        {
            return format.ToLower() switch
            {
                "json" => new JsonDataSerializer(), // Return JSON serializer for "json"
                "xml" => new XmlDataSerializer(), // Return XML serializer for "xml"
                _ => throw new NotSupportedException($"Format '{format}' is not supported.") // Throw error for unsupported formats
            };
        }
    }

    // Represents an individual search result item from Google Custom Search
    public class ResultItem
    {
        public string Title { get; set; } // The title of the search result
        public string Link { get; set; } // The URL link to the result
        public string Snippet { get; set; } // A brief snippet or description of the result
    }

    // Represents the response from the Google Custom Search API
    public class GoogleSearchResponse
    {
        public List<ResultItem> Items { get; set; } // List of search result items
    }
}
